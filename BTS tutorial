/*
class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}
*/

    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> result=new ArrayList<>();
        if(root==null) return result;
        Queue<TreeNode> que=new LinkedList<>();
        que.offer(root);
        
        while(!que.isEmpty()){
            double sum=0;
            int levelSize=que.size();
            for(int i=0;i<levelSize;i++){
                TreeNode currentN=que.poll();
                if(currentN.left!=null) que.offer(currentN.left);
                if(currentN.right!=null) que.offer(currentN.right);
                sum+=currentN.val;
            }
            result.add(sum/levelSize);
        }
        return result;
    }
class Solution {
    public ArrayList<ArrayList<Integer>> levelOrder(Node root) {
        // Your code here
        ArrayList<ArrayList<Integer>> result=new ArrayList<>();
        if(root==null) return result;
        Queue<Node> que=new LinkedList<>();
        que.offer(root);
        while(!que.isEmpty()){
            int levelSize=que.size();
            ArrayList<Integer>currentLevel=new ArrayList<>();
            for(int i=0;i<levelSize;i++){
                Node currentNode=que.poll();
                if(currentNode.left!=null)que.offer(currentNode.left);
                if(currentNode.right!=null)que.offer(currentNode.right);
                currentLevel.add(currentNode.data);
            }
            result.add(currentLevel);
        }
        return result;
    }
}
//https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/
  public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>>result=new ArrayList<>();
        if(root==null) return result;
        Deque<TreeNode>que=new LinkedList<>();
        que.add(root);
        boolean reverse=false;
        while(!que.isEmpty()){
            int levelSize=que.size();
            List<Integer>currLevel=new ArrayList<>();
            for(int i=0;i<levelSize;i++){
                if(!reverse){
                    TreeNode currNode=que.pollFirst();
                    currLevel.add(currNode.val);
                    if(currNode.left!=null)que.addLast(currNode.left);
                    if(currNode.right!=null)que.addLast(currNode.right);
                }
                else{
                    TreeNode currNode=que.pollLast();
                    currLevel.add(currNode.val);
                    if(currNode.right!=null)que.addFirst(currNode.right);
                    if(currNode.left!=null)que.addFirst(currNode.left);
                }
            }
            result.add(currLevel);
            reverse=!reverse;
        }
        return result;
    }
//https://leetcode.com/problems/binary-tree-level-order-traversal-ii/
public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>>result=new ArrayList<>();
    if(root==null) return result;
    Queue<TreeNode>que=new LinkedList<>();
    que.offer(root);
    while(!que.isEmpty()){
        int levelSize=que.size();
       List<Integer> currlevel=new ArrayList<>();
       for(int i=0;i<levelSize;i++){
        TreeNode currNode=que.poll();
        if(currNode.left!=null)que.offer(currNode.left);
        if(currNode.right!=null)que.offer(currNode.right);
        currlevel.add(currNode.val);
       }
       result.add(currlevel);
    }
    Collections.reverse(result);
    return result;
    }
//https://leetcode.com/problems/populating-next-right-pointers-in-each-node/
public Node connect(Node root) {
    if(root==null) return root;
    Node leftmost=root;
    while(leftmost.left!=null){
       Node current=leftmost;
        while(current!=null){
            current.left.next=current.right;
            if(current.next!=null)current.right.next=current.next.left;
            current=current.next;
        }
        leftmost=leftmost.left;
    }
    return root;
    }
//https://leetcode.com/problems/cousins-in-binary-tree/
  public boolean isCousins(TreeNode root, int x, int y) {
        if(root==null) return false;
        Queue<TreeNode>que=new LinkedList<>();
        que.offer(root);
        while(!que.isEmpty()){
            boolean fx=false;
            boolean fy=false;
            int levelsize=que.size();
            for(int i=0;i<levelsize;i++){
                TreeNode currNode=que.poll();
                if(currNode.left!=null&&currNode.right!=null){
                    if(currNode.left.val==x&&currNode.right.val==y||currNode.right.val==x&&currNode.left.val==y) return false;
                }
                if(currNode.left!=null){
                    que.offer(currNode.left);
                    if(currNode.left.val==x)fx=true;
                    if(currNode.left.val==y)fy=true;
                }
                if(currNode.right!=null){
                    que.offer(currNode.right);
                    if(currNode.right.val==x)fx=true;
                    if(currNode.right.val==y)fy=true;
                    }
                if(fx&&fy) return true;
            }
        }
        return false;
    }
//https://leetcode.com/problems/binary-tree-right-side-view/submissions/1674930646/
 public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result=new ArrayList<>();
        if(root==null) return result;
        Queue<TreeNode> que=new LinkedList<>();
        que.offer(root);
        while(!que.isEmpty()){
            int levelSize=que.size();
            for(int i=0;i<levelSize;i++){
                TreeNode currNode=que.poll();
                if(currNode.left!=null)que.offer(currNode.left);
                if(currNode.right!=null)que.offer(currNode.right);
                if(i==levelSize-1) result.add(currNode.val);
            }
        }
        return result;
    }
https://leetcode.com/problems/symmetric-tree/
class Solution {
    public boolean isSymmetric1(TreeNode root) {
        if(root==null) return true;
        Queue<TreeNode>que=new LinkedList<>();
        que.add(root.left);
        que.add(root.right);
        while(!que.isEmpty()){
            TreeNode leftN=que.poll();
            TreeNode rightN=que.poll();
            if(leftN==null&&rightN==null)continue;
            if(leftN==null||rightN==null) return false;
            if(leftN.val!=rightN.val) return false;
            que.add(leftN.left);
            que.add(rightN.right);
            que.add(leftN.right);
            que.add(rightN.left);
        }
        return true;
    }
    public boolean isSymmetric(TreeNode root) {
        return root==null||isSymmetric(root.left,root.right);
    }
    boolean isSymmetric(TreeNode leftN,TreeNode rightN){
        if(leftN==null||rightN==null) return leftN==rightN;
        if(leftN.val!=rightN.val) return false;
        return isSymmetric(leftN.left,rightN.right)&&isSymmetric(leftN.right,rightN.left);
    }
}
//find value in tree
public TreeNode nextValue(TreeNode node,int key){
        if(node==null)return null;
        Queue<TreeNode> que=new LinkedList<>();
        while(!que.isEmpty()){
            TreeNode currentNode=que.poll();
            if(currentNode.left!=null) que.offer(currentNode.left);
            if(currentNode.right!=null)que.offer(currentNode.right);
            if(currentNode.val==key) break;
        }
        return que.peek();
    }


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
       if(root==null) return false;
       Queue<TreeNode> que=new LinkedList<>();
       que.offer(root);
       
       while(!que.isEmpty()){
        boolean isFindx=false;
        boolean isFindy=false;
        int size=que.size();
        for(int i=0;i<size;i++){
            TreeNode currNode=que.poll();
            if(currNode.val==x)isFindx=true;
            if(currNode.val==y)isFindy=true;
            if(currNode.left!=null&&currNode.right!=null){
            if(currNode.left.val==x&&currNode.right.val==y||currNode.right.val==x&&currNode.left.val==y) return false;
            }
            if(currNode.left!=null)que.offer(currNode.left);
            if(currNode.right!=null)que.offer(currNode.right);
        }
        if(isFindx&&isFindy) return  true;
        if(isFindx||isFindy)return false;
       }
       return false;
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null)return true;
        Queue<TreeNode>que=new LinkedList<>();
        que.add(root.left);
        que.add(root.right);
        while(!que.isEmpty()){
            TreeNode left=que.poll();
            TreeNode right=que.poll();
            if(left==null&&right==null) continue;
            if(left==null||right==null) return false;
            if(left.val!=right.val) return false;
            que.add(left.left);
            que.add(right.right);
            que.add(left.right);
            que.add(right.left);
        }
        return true;
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int diameter=0;
    public int diameterOfBinaryTree(TreeNode root) {
     height(root);   
     return diameter-1;
    }
    int height(TreeNode node){
        if(node==null) return 0;
        int lefth=height(node.left);
        int righth=height(node.right);
        int dia=lefth+righth+1;
        diameter=Math.max(diameter,dia);
        return Math.max(lefth,righth)+1;
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root==null) return null;
        TreeNode left=invertTree(root.left);
        TreeNode right=invertTree(root.right);
        root.left=right;
        root.right=left;
        return root;
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        return helper(root,null,null);
    }
    public boolean helper(TreeNode node,Integer low,Integer high){
        if(node==null) return true;
        if(low!=null&& node.val<=low) return false;
        if(high!=null&&node.val>=high) return false;
        boolean leftT=helper(node.left,low,node.val);
        boolean rightT=helper(node.right,node.val,high);
        return leftT&&rightT;
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void flatten(TreeNode root) {
        TreeNode current=root;
        while(current!=null){
            if(current.left!=null){
                TreeNode temp=current.left;
                while(temp.right!=null){
                 temp=temp.right;   
                }
                temp.right=current.right;
                current.right=current.left;
                current.left=null;
            }
            current=current.right;
        }
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null) return null;
        if(root==p||root==q) return root;
        TreeNode leftT=lowestCommonAncestor(root.left,p,q);
        TreeNode rightT=lowestCommonAncestor(root.right,p,q);
        if(leftT!=null&&rightT!=null) return root;
        return leftT==null?rightT:leftT;
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        return helper(root,k).val;
    }
    int count=0;
    public TreeNode helper(TreeNode node,int k){
        if(node==null) return null;
        TreeNode left=helper(node.left,k);
        if(left!=null) return left;
        count++;
        if(count==k) return node;
        return helper(node.right,k);
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
     if(preorder.length==0) return null;
     int r=preorder[0];
     int index=0;
     for(int i=0;i<inorder.length;i++){
        if(inorder[i]==r){
            index=i;
            break;
        }
     }
     TreeNode node=new TreeNode(r);
     node.left=buildTree(Arrays.copyOfRange(preorder,1,index+1),Arrays.copyOfRange(inorder,0,index));
     node.right=buildTree(Arrays.copyOfRange(preorder,index+1,preorder.length),Arrays.copyOfRange(inorder,index+1,inorder.length));
     return node;   
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//Hard Solution
class Solution {
    int ans=0;
    public int maxPathSum(TreeNode root) {
     helper(root);
     return ans; 
    }
    int helper(TreeNode node){
        if(node==null) return 0;
        int leftN=helper(node.left);
        int rightN=helper(node.right);
        leftN=Math.max(0,leftN);
        rightN=Math.max(0,rightN);
        int pathSum=leftN+rightN+node.val;
        ans=Math.max(pathSum,ans);
        return Math.max(leftN,rightN)+node.val;
    }  
        static boolean pathExist(TreeNode root1,int []arr){
        if(root1==null) return arr.length==0;
        return helper(root1,arr,0);
    }

        private static boolean helper(TreeNode root1, int[] arr, int index) {
    if(root1==null) return false;
    if(index>=arr.length||root1.value!=arr[index]) return false;
    if(root1.left==null&&root1.right==null&&index==arr.length-1) return true;
    return helper(root1.left,arr,index+1)||helper(root1.right,arr,index+1);
    }
}
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int sumNumbers(TreeNode root) {
     return helper(root,0);   
    }
    int helper(TreeNode node,int sum){
        if(node==null) return 0;
        sum=sum*10+node.val;
        if(node.left==null&&node.right==null) return sum;
        return helper(node.left,sum)+helper(node.right,sum);
    }
}
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
     if(root==null) return false;
     if(targetSum==root.val&&root.left==null&&root.right==null) return true;
     return hasPathSum(root.left,targetSum-root.val)||hasPathSum(root.right,targetSum-root.val);   
    }
}
